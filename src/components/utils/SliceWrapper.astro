---
import { client } from '../../assets/scripts/utils/api/sanityClient';
import { getDocumentById } from '../../assets/scripts/utils/api/api';
import Citation from "../organisms/Section/slices/Citation";
import {
    FullPicture,
    BasicPicture,
    DoublePicture,
    GridPicture,
} from "../organisms/Section/slices/Media";
/// LANDING 
import FAQ from '../organisms/Section/slices/FAQ';
import Steps from '../organisms/Section/slices/Steps';
import FeaturedProjects from '../organisms/Section/slices/FeaturedProjects';

let { node } = Astro.props;
if (node._type === "images" && Object.keys(node).length === 3) {
    node.images = node.images.map((el) => {
        return {
            url: el.asset?._ref,
            widthDesktop: 500,
            heightDesktop: 700,
            heightMobile: 900,
            widthMobile: 600,
            crop: null,
            alt: el?.alt,
            posterDesktop: null,
            posterMobile: null,
            lazy: true,
            images: null,
        };
    });

    // console.log(node)
}

let firstProject;
let secondProject;
if(node._type === 'projects_snippet'){
    firstProject = await client.fetch(getDocumentById(node.project_one._ref));
    secondProject = await client.fetch(getDocumentById(node.project_two._ref));
}

---

<!---Managfe Citation -->{
    node._type === "citation" && (
        <Citation author={node?.author} content={node?.content} />
    )
}


{node._type === 'images' && (<div>
    <!---Manage Images -->
    {
        node._type === "images" && node?.isFull && (
            <FullPicture
                url={node.images[0].asset._ref}
                widthDesktop={1920}
                heightDesktop={1080}
                heightMobile={900}
                widthMobile={600}
                crop={null}
                alt={node.images[0].alt}
                posterDesktop={null}
                posterMobile={null}
                lazy={true}
                images={null}
                client:load
            />
        )
    }
    {
        node._type === "images" && typeof node.isFull !== 'undefined' && !node?.isFull && Object.keys(node).length === 4  && (
            <BasicPicture
                url={node.images[0].asset._ref}
                widthDesktop={1440}
                heightDesktop={810}
                heightMobile={900}
                widthMobile={600}
                crop={null}
                alt={node.images[0].alt}
                posterDesktop={null}
                posterMobile={null}
                lazy={true}
                images={null}
                client:load
            />
        )
    }
    {
        node._type === "images" &&
            node?.position &&
            node?.position !== "center" && (
                <DoublePicture
                    pictureLeft={{
                        url: node.images[0].asset._ref,
                        widthDesktop: 500,
                        heightDesktop: 700,
                        heightMobile: 900,
                        widthMobile: 600,
                        crop: null,
                        alt: node.images[0].alt,
                        posterDesktop: null,
                        posterMobile: null,
                        lazy: true,
                        images: null,
                    }}
                    pictureRight={{
                        url: node.images[1].asset._ref,
                        widthDesktop: 500,
                        heightDesktop: 700,
                        heightMobile: 900,
                        widthMobile: 600,
                        crop: null,
                        alt: node.images[1].alt,
                        posterDesktop: null,
                        posterMobile: null,
                        lazy: true,
                        images: null,
                    }}
                    up={node.position}
                client:load/>
            )
    }
    
    {
        node._type === "images" && Object.keys(node).length === 3 && (
            <GridPicture pictures={node.images} client:load/>
        )
    }
    
    </div>)}


{
    node._type === 'faq' && (
        <FAQ  questions={node.questions} client:load/>
    )
}

{ node._type === "steps" && (
    <Steps steps={node} client:load/>
)}

{node._type === "projects_snippet" && (
    <FeaturedProjects project_one={firstProject} project_two={secondProject} client:load />
)}

<style lang="scss">
    div{
        grid-column: 1/16;
        @include mq(tablet, max){
            grid-column: 1/9;
        }
    }
</style>